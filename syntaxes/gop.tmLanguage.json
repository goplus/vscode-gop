{
	"information_for_contributors": [
		"This file has been converted from https://github.com/goplus/better-gop-syntax/blob/main/export/generated.tmLanguage.json",
		"If you want to provide a fix or improvement, please create a pull request against the original repository.",
		"Once accepted there, we are happy to receive an update request."
	],
	"version": "https://github.com/goplus/better-gop-syntax@v1.0.0",
	"name": "GoPlus",
	"scopeName": "source.gop",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#comments"
		},
		{
			"comment": "Interpreted string literals",
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.gop"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.gop"
				}
			},
			"name": "string.quoted.double.gop",
			"patterns": [
				{
					"include": "#string_escaped_char"
				},
				{
					"include": "#string_placeholder"
				}
			]
		},
		{
			"comment": "Raw string literals",
			"begin": "`",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.gop"
				}
			},
			"end": "`",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.gop"
				}
			},
			"name": "string.quoted.raw.gop",
			"patterns": [
				{
					"include": "#string_placeholder"
				}
			]
		},
		{
			"comment": "Syntax error receiving channels",
			"match": "<\\-([\\t ]+)chan\\b",
			"captures": {
				"1": {
					"name": "invalid.illegal.receive-channel.gop"
				}
			}
		},
		{
			"comment": "Syntax error sending channels",
			"match": "\\bchan([\\t ]+)<-",
			"captures": {
				"1": {
					"name": "invalid.illegal.send-channel.gop"
				}
			}
		},
		{
			"comment": "Syntax error using slices",
			"match": "\\[\\](\\s+)",
			"captures": {
				"1": {
					"name": "invalid.illegal.slice.gop"
				}
			}
		},
		{
			"comment": "Syntax error numeric literals",
			"match": "\\b0[0-7]*[89]\\d*\\b",
			"name": "invalid.illegal.numeric.gop"
		},
		{
			"comment": "Built-in functions",
			"match": "\\b(append|cap|close|complex|copy|delete|imag|len|make|new|panic|print|println|real|recover)\\b(?=\\()",
			"name": "support.function.builtin.gop"
		},
		{
			"comment": "Function declarations",
			"match": "^(\\bfunc\\b)(?:\\s+(\\([^\\)]+\\)\\s+)?(\\w+)(?=\\())?",
			"captures": {
				"1": {
					"name": "keyword.function.gop"
				},
				"2": {
					"patterns": [
						{
							"include": "#brackets"
						},
						{
							"include": "#operators"
						}
					]
				},
				"3": {
					"patterns": [
						{
							"match": "\\d\\w*",
							"name": "invalid.illegal.identifier.gop"
						},
						{
							"match": "\\w+",
							"name": "entity.name.function.gop"
						}
					]
				}
			}
		},
		{
			"comment": "Functions",
			"match": "(\\bfunc\\b)|(\\w+)(?=\\()",
			"captures": {
				"1": {
					"name": "keyword.function.gop"
				},
				"2": {
					"patterns": [
						{
							"match": "\\d\\w*",
							"name": "invalid.illegal.identifier.gop"
						},
						{
							"match": "\\w+",
							"name": "support.function.gop"
						}
					]
				}
			}
		},
		{
			"include": "#numeric_literals"
		},
		{
			"comment": "Language constants",
			"match": "\\b(true|false|nil|iota)\\b",
			"name": "constant.language.gop"
		},
		{
			"begin": "\\b(package)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.package.gop"
				}
			},
			"end": "(?!\\G)",
			"patterns": [
				{
					"match": "\\d\\w*",
					"name": "invalid.illegal.identifier.gop"
				},
				{
					"match": "\\w+",
					"name": "entity.name.package.gop"
				}
			]
		},
		{
			"begin": "\\b(type)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.type.gop"
				}
			},
			"end": "(?!\\G)",
			"patterns": [
				{
					"match": "\\d\\w*",
					"name": "invalid.illegal.identifier.gop"
				},
				{
					"match": "\\w+",
					"name": "entity.name.type.gop"
				}
			]
		},
		{
			"begin": "\\b(import)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.import.gop"
				}
			},
			"end": "(?!\\G)",
			"patterns": [
				{
					"include": "#imports"
				}
			]
		},
		{
			"begin": "\\b(var)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.var.gop"
				}
			},
			"end": "(?!\\G)",
			"patterns": [
				{
					"include": "#variables"
				}
			]
		},
		{
			"match": "(?<!var)\\s*(\\w+(?:\\.\\w+)*(?>,\\s*\\w+(?:\\.\\w+)*)*)(?=\\s*=(?!=))",
			"captures": {
				"1": {
					"patterns": [
						{
							"match": "\\d\\w*",
							"name": "invalid.illegal.identifier.gop"
						},
						{
							"match": "\\w+(?:\\.\\w+)*",
							"name": "variable.other.assignment.gop",
							"captures": {
								"0": {
									"patterns": [
										{
											"include": "#delimiters"
										}
									]
								}
							}
						},
						{
							"include": "#delimiters"
						}
					]
				}
			}
		},
		{
			"match": "\\b\\w+(?:,\\s*\\w+)*(?=\\s*:=)",
			"captures": {
				"0": {
					"patterns": [
						{
							"match": "\\d\\w*",
							"name": "invalid.illegal.identifier.gop"
						},
						{
							"match": "\\w+",
							"name": "variable.other.assignment.gop"
						},
						{
							"include": "#delimiters"
						}
					]
				}
			}
		},
		{
			"comment": "Terminators",
			"match": ";",
			"name": "punctuation.terminator.gop"
		},
		{
			"include": "#brackets"
		},
		{
			"include": "#delimiters"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#runes"
		},
		{
			"include": "#storage_types"
		}
	],
	"repository": {
		"brackets": {
			"patterns": [
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.begin.bracket.curly.gop"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.end.bracket.curly.gop"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.begin.bracket.round.gop"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.end.bracket.round.gop"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"match": "\\[|\\]",
					"name": "punctuation.definition.bracket.square.gop"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.block.gop",
					"begin": "(\\/\\*)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.gop"
						}
					},
					"end": "(\\*\\/)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.comment.gop"
						}
					}
				},
				{
					"name": "comment.line.double-slash.gop",
					"begin": "(\\/\\/)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.gop"
						}
					},
					"end": "(?:\\n|$)"
				}
			]
		},
		"delimiters": {
			"patterns": [
				{
					"match": ",",
					"name": "punctuation.other.comma.gop"
				},
				{
					"match": "\\.(?!\\.\\.)",
					"name": "punctuation.other.period.gop"
				},
				{
					"match": ":(?!=)",
					"name": "punctuation.other.colon.gop"
				}
			]
		},
		"imports": {
			"patterns": [
				{
					"match": "((?!\\s+\")[^\\s]*)?\\s*((\")([^\"]*)(\"))",
					"captures": {
						"1": {
							"name": "entity.alias.import.gop"
						},
						"2": {
							"name": "string.quoted.double.gop"
						},
						"3": {
							"name": "punctuation.definition.string.begin.gop"
						},
						"4": {
							"name": "entity.name.import.gop"
						},
						"5": {
							"name": "punctuation.definition.string.end.gop"
						}
					}
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.imports.begin.bracket.round.gop"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.imports.end.bracket.round.gop"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#imports"
						}
					]
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"comment": "Flow control keywords",
					"match": "\\b(break|case|continue|default|defer|else|fallthrough|for|go|goto|if|range|return|select|switch)\\b",
					"name": "keyword.control.gop"
				},
				{
					"match": "\\bchan\\b",
					"name": "keyword.channel.gop"
				},
				{
					"match": "\\bconst\\b",
					"name": "keyword.const.gop"
				},
				{
					"match": "\\bfunc\\b",
					"name": "keyword.function.gop"
				},
				{
					"match": "\\binterface\\b",
					"name": "keyword.interface.gop"
				},
				{
					"match": "\\bmap\\b",
					"name": "keyword.map.gop"
				},
				{
					"match": "\\bstruct\\b",
					"name": "keyword.struct.gop"
				}
			]
		},
		"operators": {
			"comment": "Note that the order here is very important!",
			"patterns": [
				{
					"match": "(\\*|&)(?=\\w)",
					"name": "keyword.operator.address.gop"
				},
				{
					"match": "<\\-",
					"name": "keyword.operator.channel.gop"
				},
				{
					"match": "\\-\\-",
					"name": "keyword.operator.decrement.gop"
				},
				{
					"match": "\\+\\+",
					"name": "keyword.operator.increment.gop"
				},
				{
					"match": "(==|!=|<=|>=|<(?!<)|>(?!>))",
					"name": "keyword.operator.comparison.gop"
				},
				{
					"match": "(&&|\\|\\||!)",
					"name": "keyword.operator.logical.gop"
				},
				{
					"match": "(=|\\+=|\\-=|\\|=|\\^=|\\*=|/=|:=|%=|<<=|>>=|&\\^=|&=)",
					"name": "keyword.operator.assignment.gop"
				},
				{
					"match": "(\\+|\\-|\\*|/|%)",
					"name": "keyword.operator.arithmetic.gop"
				},
				{
					"match": "(&(?!\\^)|\\||\\^|&\\^|<<|>>)",
					"name": "keyword.operator.arithmetic.bitwise.gop"
				},
				{
					"match": "\\.\\.\\.",
					"name": "keyword.operator.ellipsis.gop"
				}
			]
		},
		"runes": {
			"patterns": [
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.gop"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.gop"
						}
					},
					"name": "string.quoted.rune.gop",
					"patterns": [
						{
							"match": "\\G(\\\\([0-7]{3}|[abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})|.)(?=')",
							"name": "constant.other.rune.gop"
						},
						{
							"match": "[^']+",
							"name": "invalid.illegal.unknown-rune.gop"
						}
					]
				}
			]
		},
		"storage_types": {
			"patterns": [
				{
					"match": "\\bbool\\b",
					"name": "storage.type.boolean.gop"
				},
				{
					"match": "\\bbyte\\b",
					"name": "storage.type.byte.gop"
				},
				{
					"match": "\\berror\\b",
					"name": "storage.type.error.gop"
				},
				{
					"match": "\\b(complex(64|128)|float(32|64)|u?int(8|16|32|64)?)\\b",
					"name": "storage.type.numeric.gop"
				},
				{
					"match": "\\brune\\b",
					"name": "storage.type.rune.gop"
				},
				{
					"match": "\\bstring\\b",
					"name": "storage.type.string.gop"
				},
				{
					"match": "\\buintptr\\b",
					"name": "storage.type.uintptr.gop"
				}
			]
		},
		"string_escaped_char": {
			"patterns": [
				{
					"match": "\\\\([0-7]{3}|[abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})",
					"name": "constant.character.escape.gop"
				},
				{
					"match": "\\\\[^0-7xuUabfnrtv\\'\"]",
					"name": "invalid.illegal.unknown-escape.gop"
				}
			]
		},
		"string_placeholder": {
			"patterns": [
				{
					"match": "%(\\[\\d+\\])?([\\+#\\-0\\x20]{,2}((\\d+|\\*)?(\\.?(\\d+|\\*|(\\[\\d+\\])\\*?)?(\\[\\d+\\])?)?))?[vT%tbcdoqxXUbeEfFgGspw]",
					"name": "constant.other.placeholder.gop"
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"match": "(\\w+(?:,\\s*\\w+)*)(\\s+\\*?\\w+(?:\\.\\w+)?\\s*)?(?=\\s*=)",
					"captures": {
						"1": {
							"patterns": [
								{
									"match": "\\d\\w*",
									"name": "invalid.illegal.identifier.gop"
								},
								{
									"match": "\\w+",
									"name": "variable.other.assignment.gop"
								},
								{
									"include": "#delimiters"
								}
							]
						},
						"2": {
							"patterns": [
								{
									"include": "$self"
								}
							]
						}
					}
				},
				{
					"match": "(\\w+(?:,\\s*\\w+)*)(\\s+(\\[(\\d*|\\.\\.\\.)\\])*\\*?(<-)?\\w+(?:\\.\\w+)?\\s*[^=].*)",
					"captures": {
						"1": {
							"patterns": [
								{
									"match": "\\d\\w*",
									"name": "invalid.illegal.identifier.gop"
								},
								{
									"match": "\\w+",
									"name": "variable.other.declaration.gop"
								},
								{
									"include": "#delimiters"
								}
							]
						},
						"2": {
							"patterns": [
								{
									"include": "$self"
								}
							]
						}
					}
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.variables.begin.bracket.round.gop"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.variables.end.bracket.round.gop"
						}
					},
					"patterns": [
						{
							"include": "$self"
						},
						{
							"include": "#variables"
						}
					]
				}
			]
		},
		"numeric_literals": {
			"match": "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_\\.])|(?<=[eEpP])[+-])*",
			"captures": {
				"0": {
					"patterns": [
						{
							"begin": "(?=.)",
							"end": "(?:\\n|$)",
							"patterns": [
								{
									"match": "(?:(?:(?:(?:(?:\\G(?=[0-9.])(?!0[xXbBoO])([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?<=[0-9])\\.|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?(?:(?<!_)([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?(i(?!\\w))?(?:\\n|$)|\\G(?=[0-9.])(?!0[xXbBoO])([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)(?<!_)([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*))(i(?!\\w))?(?:\\n|$))|\\G((?:(?<=[0-9])\\.|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)(?:(?<!_)([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?(i(?!\\w))?(?:\\n|$))|(\\G0[xX])_?([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?<=[0-9a-fA-F])\\.|\\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?(?<!_)([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*))(i(?!\\w))?(?:\\n|$))|(\\G0[xX])_?([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)(?<!_)([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*))(i(?!\\w))?(?:\\n|$))|(\\G0[xX])((?:(?<=[0-9a-fA-F])\\.|\\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)(?<!_)([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*))(i(?!\\w))?(?:\\n|$))",
									"captures": {
										"1": {
											"name": "constant.numeric.decimal.gop",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric.gop"
												}
											]
										},
										"2": {
											"name": "punctuation.separator.constant.numeric.gop"
										},
										"3": {
											"name": "constant.numeric.decimal.point.gop"
										},
										"4": {
											"name": "constant.numeric.decimal.gop",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric.gop"
												}
											]
										},
										"5": {
											"name": "punctuation.separator.constant.numeric.gop"
										},
										"6": {
											"name": "keyword.other.unit.exponent.decimal.gop"
										},
										"7": {
											"name": "keyword.operator.plus.exponent.decimal.gop"
										},
										"8": {
											"name": "keyword.operator.minus.exponent.decimal.gop"
										},
										"9": {
											"name": "constant.numeric.exponent.decimal.gop",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric.gop"
												}
											]
										},
										"10": {
											"name": "keyword.other.unit.imaginary.gop"
										},
										"11": {
											"name": "constant.numeric.decimal.gop",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric.gop"
												}
											]
										},
										"12": {
											"name": "punctuation.separator.constant.numeric.gop"
										},
										"13": {
											"name": "keyword.other.unit.exponent.decimal.gop"
										},
										"14": {
											"name": "keyword.operator.plus.exponent.decimal.gop"
										},
										"15": {
											"name": "keyword.operator.minus.exponent.decimal.gop"
										},
										"16": {
											"name": "constant.numeric.exponent.decimal.gop",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric.gop"
												}
											]
										},
										"17": {
											"name": "keyword.other.unit.imaginary.gop"
										},
										"18": {
											"name": "constant.numeric.decimal.point.gop"
										},
										"19": {
											"name": "constant.numeric.decimal.gop",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric.gop"
												}
											]
										},
										"20": {
											"name": "punctuation.separator.constant.numeric.gop"
										},
										"21": {
											"name": "keyword.other.unit.exponent.decimal.gop"
										},
										"22": {
											"name": "keyword.operator.plus.exponent.decimal.gop"
										},
										"23": {
											"name": "keyword.operator.minus.exponent.decimal.gop"
										},
										"24": {
											"name": "constant.numeric.exponent.decimal.gop",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric.gop"
												}
											]
										},
										"25": {
											"name": "keyword.other.unit.imaginary.gop"
										},
										"26": {
											"name": "keyword.other.unit.hexadecimal.gop"
										},
										"27": {
											"name": "constant.numeric.hexadecimal.gop",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric.gop"
												}
											]
										},
										"28": {
											"name": "punctuation.separator.constant.numeric.gop"
										},
										"29": {
											"name": "constant.numeric.hexadecimal.gop"
										},
										"30": {
											"name": "constant.numeric.hexadecimal.gop",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric.gop"
												}
											]
										},
										"31": {
											"name": "punctuation.separator.constant.numeric.gop"
										},
										"32": {
											"name": "keyword.other.unit.exponent.hexadecimal.gop"
										},
										"33": {
											"name": "keyword.operator.plus.exponent.hexadecimal.gop"
										},
										"34": {
											"name": "keyword.operator.minus.exponent.hexadecimal.gop"
										},
										"35": {
											"name": "constant.numeric.exponent.hexadecimal.gop",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric.gop"
												}
											]
										},
										"36": {
											"name": "keyword.other.unit.imaginary.gop"
										},
										"37": {
											"name": "keyword.other.unit.hexadecimal.gop"
										},
										"38": {
											"name": "constant.numeric.hexadecimal.gop",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric.gop"
												}
											]
										},
										"39": {
											"name": "punctuation.separator.constant.numeric.gop"
										},
										"40": {
											"name": "keyword.other.unit.exponent.hexadecimal.gop"
										},
										"41": {
											"name": "keyword.operator.plus.exponent.hexadecimal.gop"
										},
										"42": {
											"name": "keyword.operator.minus.exponent.hexadecimal.gop"
										},
										"43": {
											"name": "constant.numeric.exponent.hexadecimal.gop",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric.gop"
												}
											]
										},
										"44": {
											"name": "keyword.other.unit.imaginary.gop"
										},
										"45": {
											"name": "keyword.other.unit.hexadecimal.gop"
										},
										"46": {
											"name": "constant.numeric.hexadecimal.gop"
										},
										"47": {
											"name": "constant.numeric.hexadecimal.gop",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric.gop"
												}
											]
										},
										"48": {
											"name": "punctuation.separator.constant.numeric.gop"
										},
										"49": {
											"name": "keyword.other.unit.exponent.hexadecimal.gop"
										},
										"50": {
											"name": "keyword.operator.plus.exponent.hexadecimal.gop"
										},
										"51": {
											"name": "keyword.operator.minus.exponent.hexadecimal.gop"
										},
										"52": {
											"name": "constant.numeric.exponent.hexadecimal.gop",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric.gop"
												}
											]
										},
										"53": {
											"name": "keyword.other.unit.imaginary.gop"
										}
									}
								},
								{
									"match": "(?:(?:(?:\\G(?=[0-9.])(?!0[xXbBoO])([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)(i(?!\\w))?(?:\\n|$)|(\\G0[bB])_?([01](?:[01]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)(i(?!\\w))?(?:\\n|$))|(\\G0[oO]?)_?((?:[0-7]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))+)(i(?!\\w))?(?:\\n|$))|(\\G0[xX])_?([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)(i(?!\\w))?(?:\\n|$))",
									"captures": {
										"1": {
											"name": "constant.numeric.decimal.gop",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric.gop"
												}
											]
										},
										"2": {
											"name": "punctuation.separator.constant.numeric.gop"
										},
										"3": {
											"name": "keyword.other.unit.imaginary.gop"
										},
										"4": {
											"name": "keyword.other.unit.binary.gop"
										},
										"5": {
											"name": "constant.numeric.binary.gop",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric.gop"
												}
											]
										},
										"6": {
											"name": "punctuation.separator.constant.numeric.gop"
										},
										"7": {
											"name": "keyword.other.unit.imaginary.gop"
										},
										"8": {
											"name": "keyword.other.unit.octal.gop"
										},
										"9": {
											"name": "constant.numeric.octal.gop",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric.gop"
												}
											]
										},
										"10": {
											"name": "punctuation.separator.constant.numeric.gop"
										},
										"11": {
											"name": "keyword.other.unit.imaginary.gop"
										},
										"12": {
											"name": "keyword.other.unit.hexadecimal.gop"
										},
										"13": {
											"name": "constant.numeric.hexadecimal.gop",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric.gop"
												}
											]
										},
										"14": {
											"name": "punctuation.separator.constant.numeric.gop"
										},
										"15": {
											"name": "keyword.other.unit.imaginary.gop"
										}
									}
								},
								{
									"match": "(?:(?:[0-9a-zA-Z_\\.])|(?<=[eEpP])[+-])+",
									"name": "invalid.illegal.constant.numeric.gop"
								}
							]
						}
					]
				}
			}
		}
	}
}